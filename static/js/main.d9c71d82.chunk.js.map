{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","components/title/title.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","amza","id","alt","name","email","CardList","lwachoun","length","map","key","SearchBox","placeholder","handleChanges","type","onChange","Title","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filtredLwachoun","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uVAIaA,G,kBAAO,SAAAC,GAAK,OACrB,yBAAKC,UAAU,kBACX,yBAAKC,IAAG,+BAA0BF,EAAMG,KAAKC,GAArC,0BAAiEC,IAAG,iBAAYL,EAAMG,KAAKG,QACnG,4BAAKN,EAAMG,KAAKG,MAChB,2BAAIN,EAAMG,KAAKI,UCHVC,EAAW,SAAAR,GACpB,OAAIA,EAAMS,SAASC,OAAS,EACjB,yBAAKT,UAAU,aAEdD,EAAMS,SAASE,KAAI,SAAAR,GAAI,OAAK,kBAAC,EAAD,CAAMS,IAAKT,EAAKC,GAAID,KAAMA,QAIvD,yBAAKF,UAAU,IAClB,mDCVCY,G,MAAY,SAAC,GAAD,IAAEC,EAAF,EAAEA,YAAYC,EAAd,EAAcA,cAAd,OACrB,2BACId,UAAU,aACVe,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCLLG,G,MAAQ,SAAAlB,GACjB,OAAO,wBAAIC,UAAU,SAAd,kBCwCIkB,E,kDAtCX,aAAe,IAAD,8BACV,gBAgBJJ,cAAgB,SAACK,GACb,EAAKC,SAAS,CAACC,YAAaF,EAAEG,OAAOC,SAfrC,EAAKC,MAAQ,CACThB,SAAU,GACVa,YAAa,IALP,E,gEASO,IAAD,OAChBI,MAAM,8CACDC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACF,EAAKT,SAAS,CAACZ,SAAUqB,S,+BAQ3B,IAAD,EAC2BC,KAAKN,MAA9BhB,EADF,EACEA,SAAUa,EADZ,EACYA,YACXU,EAAkBvB,EAASwB,QAAO,SAAA9B,GAAI,OAAIA,EAAKG,KAAK4B,cAAcC,SAASb,EAAYY,kBAC7F,OACI,yBAAKjC,UAAU,OACX,kBAAC,EAAD,MACA,kBAAC,EAAD,CACIa,YAAY,cACZC,cAAegB,KAAKhB,gBAExB,kBAAC,EAAD,CAAUN,SAAUuB,S,GAhClBI,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d9c71d82.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nimport './card.styles.css';\r\n\r\nexport const Card = props => (\r\n    <div className='card-container'>\r\n        <img src={`https://robohash.org/${props.amza.id}?set=set5&size=180x180`} alt={`monster${props.amza.name}`}/>\r\n        <h2>{props.amza.name}</h2>\r\n        <p>{props.amza.email}</p>\r\n    </div>\r\n);","import React from \"react\";\r\n\r\nimport './card-list.styles.css';\r\nimport {Card} from \"../card/card.component\";\r\n\r\nexport const CardList = props => {\r\n    if (props.lwachoun.length > 0) {\r\n        return <div className='card-list'>\r\n            {\r\n                props.lwachoun.map(amza => (<Card key={amza.id} amza={amza}/>))\r\n            }\r\n        </div>\r\n    } else {\r\n        return <div className=''>\r\n            <h2>No Result Found !</h2>\r\n        </div>\r\n    }\r\n}","import React from \"react\";\r\n\r\nimport './search-box.styles.css';\r\n\r\nexport const SearchBox = ({placeholder,handleChanges}) =>(\r\n    <input\r\n        className=\"search-box\"\r\n        type=\"search\"\r\n        placeholder={placeholder}\r\n        onChange={handleChanges}\r\n    />\r\n);","import React from \"react\";\r\n\r\nimport './title.styles.css';\r\n\r\nexport const Title = props => {\r\n    return <h1 className='title'>\r\n        lwachoun app\r\n    </h1>\r\n}","import React, {Component} from 'react';\nimport './App.css';\nimport {CardList} from \"./components/card-list/card-list.component\";\nimport {SearchBox} from \"./components/search-box/search-box.component\";\nimport {Title} from \"./components/title/title.component\";\n\nclass App extends Component {\n    constructor() {\n        super();\n\n        this.state = {\n            lwachoun: [],\n            searchField: ''\n        }\n    }\n\n    componentDidMount() {\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(users => {\n                this.setState({lwachoun: users})\n            })\n    }\n\n    handleChanges = (e) => {\n        this.setState({searchField: e.target.value})\n    }\n\n    render() {\n        const {lwachoun, searchField} = this.state;\n        const filtredLwachoun = lwachoun.filter(amza => amza.name.toLowerCase().includes(searchField.toLowerCase()));\n        return (\n            <div className='App'>\n                <Title/>\n                <SearchBox\n                    placeholder=\"search amza\"\n                    handleChanges={this.handleChanges}\n                />\n                <CardList lwachoun={filtredLwachoun}>\n                </CardList>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}